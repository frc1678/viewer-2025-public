package org.citruscircuits.viewer.constants

import org.citruscircuits.viewer.data.addLFMCounterparts
import org.citruscircuits.viewer.data.generateLFMDatapointList
import java.io.File

/**
 * Class that contains a collection of Constant values, or final values that never change
 */
class Constants {
    companion object {
        // Game specific data.
        val DEFAULT_KEY = "2025dal"
        val DEFAULT_SCHEDULE = "2025dal"
        var EVENT_KEY = "2025dal"
        var SCHEDULE_KEY = "2025dal"
        const val MY_TEAM_NUMBER = "1678"
        const val USE_TEST_DATA = false
        const val REFRESH_INTERVAL = 60//960 for champs

        // Util.
        const val NULL_PREDICTED_SCORE_CHARACTER = "-"
        const val NULL_CHARACTER = "?"
        const val EMPTY_CHARACTER = ""
        const val PREDICTED_RANKING_POINT_QUALIFICATION = 0.5
        const val VERSION_NUM = "1.2.2"
        lateinit var DOWNLOADS_FOLDER: File

        /**2025 Auto Tim Datapoints**/
        val AUTO_TIMS_DATA: List<String> = listOf(
            "Auto",
            "start_position",
            "has_preload",
            "scored_preload",
            "leave",
            "auto_coral_L1",
            "auto_coral_L2",
            "auto_coral_L3",
            "auto_coral_L4",
            "auto_drop_algae",
            "auto_drop_coral",
            "auto_fail_coral_L1",
            "auto_fail_coral_L2",
            "auto_fail_coral_L3",
            "auto_fail_coral_L4",
            "auto_fail_net",
            "auto_fail_processor",
            "auto_intake_ground_algae",
            "auto_intake_ground_coral",
            "auto_intake_reef",
            "auto_intake_station",
            "auto_net",
            "auto_processor",
            "auto_total_pieces",
            "auto_total_failed_pieces",
            "auto_total_intakes",
            "auto_total_points",
        )

        /**2025 Auto Team Datapoints**/
        val AUTO_TEAMS_DATA: List<String> = listOf(
            "Auto Data",
            "mode_start_position",
            "position_zero_starts",
            "position_one_starts",
            "position_two_starts",
            "position_three_starts",
            "position_four_starts",
            "position_five_starts",
            "preloaded_starts",
            "preload_successes",
            "auto_preload_percent_success",
            "auto_avg_total_pieces",
            "auto_max_total_pieces",
            "auto_sd_total_pieces",
            "auto_avg_total_failed_pieces",
            "auto_max_total_failed_pieces",
            "auto_sd_total_failed_pieces",
            "auto_avg_total_intakes",
            "auto_max_total_intakes",
            "auto_sd_total_intakes",
            "leave_successes",
            "auto_avg_total_points",
            "auto_max_total_points",
            "auto_sd_total_points",

            "auto_avg_coral_L1",
            "auto_avg_coral_L2",
            "auto_avg_coral_L3",
            "auto_avg_coral_L4",
            "auto_avg_fail_coral_L1",
            "auto_avg_fail_coral_L2",
            "auto_avg_fail_coral_L3",
            "auto_avg_fail_coral_L4",
            "auto_avg_net",
            "auto_avg_processor",
            "auto_avg_fail_net",
            "auto_avg_fail_processor",
            "auto_avg_intake_reef",
            "auto_avg_intake_station",
            "auto_avg_intake_ground_coral",
            "auto_avg_intake_ground_algae",
            "auto_avg_drop_coral",
            "auto_avg_drop_algae",
            "auto_coral_L1_percent_success",
            "auto_coral_L2_percent_success",
            "auto_coral_L3_percent_success",
            "auto_coral_L4_percent_success",
            "auto_net_percent_success",
            "auto_preload_percent_success",
            "auto_processor_percent_success",
            "auto_max_coral_L1",
            "auto_max_coral_L2",
            "auto_max_coral_L3",
            "auto_max_coral_L4",
            "auto_max_drop_algae",
            "auto_max_drop_coral",
            "auto_max_fail_coral_L1",
            "auto_max_fail_coral_L2",
            "auto_max_fail_coral_L3",
            "auto_max_fail_coral_L4",
            "auto_max_fail_net",
            "auto_max_fail_processor",
            "auto_max_intake_ground_algae",
            "auto_max_intake_ground_coral",
            "auto_max_intake_reef",
            "auto_max_intake_station",
            "auto_max_net",
            "auto_max_processor",
            "auto_sd_coral_L1",
            "auto_sd_coral_L2",
            "auto_sd_coral_L3",
            "auto_sd_coral_L4",
            "auto_sd_drop_algae",
            "auto_sd_drop_coral",
            "auto_sd_fail_coral_L1",
            "auto_sd_fail_coral_L2",
            "auto_sd_fail_coral_L3",
            "auto_sd_fail_coral_L4",
            "auto_sd_fail_net",
            "auto_sd_fail_processor",
            "auto_sd_intake_ground_algae",
            "auto_sd_intake_ground_coral",
            "auto_sd_intake_reef",
            "auto_sd_intake_station",
            "auto_sd_net",
            "auto_sd_processor",
        )

        /**2025 Tele Tim Datapoints**/
        val TELE_TIMS_DATA = listOf(
            "Tele",
            "tele_total_pieces",
            "tele_total_failed_pieces",
            "tele_total_intakes",
            "tele_total_points",
            "expected_cycles",
            "tele_coral_L1",
            "tele_coral_L2",
            "tele_coral_L3",
            "tele_coral_L4",
            "tele_drop_algae",
            "tele_drop_coral",
            "tele_fail_coral_L1",
            "tele_fail_coral_L2",
            "tele_fail_coral_L3",
            "tele_fail_coral_L4",
            "tele_fail_net",
            "tele_fail_processor",
            "tele_intake_ground_algae",
            "tele_intake_ground_coral",
            "tele_intake_reef",
            "tele_intake_station",
            "tele_net",
            "tele_processor",
            "tele_incap",
            "tele_intake_poach",

            )

        /**2025 Tele Team Datapoints**/
        val TELE_TEAMS_DATA = listOf(
            "Tele Data",
            "tele_avg_total_pieces",
            "tele_max_total_pieces",
            "tele_sd_total_pieces",
            "tele_avg_total_failed_pieces",
            "tele_max_total_failed_pieces",
            "tele_sd_total_failed_pieces",
            "tele_avg_total_nonzero_pieces",
            "tele_avg_total_intakes",
            "tele_max_total_intakes",
            "tele_sd_total_intakes",
            "tele_avg_total_points",
            "tele_max_total_points",
            "tele_sd_total_points",
            "tele_avg_incap",
            "tele_sd_incap",
            "max_tele_incap",
            "matches_incap",
            "total_incap_time",
            "median_nonzero_tele_incap",
            "foul_cc",

            "tele_avg_coral_L1",
            "tele_avg_coral_L2",
            "tele_avg_coral_L3",
            "tele_avg_coral_L4",
            "tele_avg_drop_coral",
            "tele_avg_drop_algae",
            "tele_avg_fail_coral_L1",
            "tele_avg_fail_coral_L2",
            "tele_avg_fail_coral_L3",
            "tele_avg_fail_coral_L4",
            "tele_avg_fail_net",
            "tele_avg_fail_processor",
            "tele_avg_incap",
            "tele_avg_intake_ground_algae",
            "tele_avg_intake_ground_coral",
            "tele_avg_intake_reef",
            "tele_avg_intake_station",
            "tele_avg_net",
            "tele_avg_processor",
            "tele_avg_total_failed_pieces",
            "tele_avg_total_intakes",
            "tele_avg_total_pieces",
            "tele_avg_total_points",
            "tele_coral_L1_percent_success",
            "tele_coral_L2_percent_success",
            "tele_coral_L3_percent_success",
            "tele_coral_L4_percent_success",
            "tele_net_percent_success",
            "tele_processor_percent_success",
            "tele_max_coral_L1",
            "tele_max_coral_L2",
            "tele_max_coral_L3",
            "tele_max_coral_L4",
            "tele_max_drop_algae",
            "tele_max_drop_coral",
            "tele_max_fail_coral_L1",
            "tele_max_fail_coral_L2",
            "tele_max_fail_coral_L3",
            "tele_max_fail_coral_L4",
            "tele_max_fail_net",
            "tele_max_fail_processor",
            "tele_max_intake_ground_algae",
            "tele_max_intake_ground_coral",
            "tele_max_intake_reef",
            "tele_max_intake_station",
            "tele_max_net",
            "tele_max_processor",
            "tele_max_total_failed_pieces",
            "tele_max_total_intakes",
            "tele_max_total_pieces",
            "tele_max_total_points",
            "tele_sd_coral_L1",
            "tele_sd_coral_L2",
            "tele_sd_coral_L3",
            "tele_sd_coral_L4",
            "tele_sd_drop_coral",
            "tele_sd_drop_algae",
            "tele_sd_fail_coral_L1",
            "tele_sd_fail_coral_L2",
            "tele_sd_fail_coral_L3",
            "tele_sd_fail_coral_L4",
            "tele_sd_fail_net",
            "tele_sd_fail_processor",
            "tele_sd_incap",
            "tele_sd_intake_ground_algae",
            "tele_sd_intake_ground_coral",
            "tele_sd_intake_reef",
            "tele_sd_intake_station",
            "tele_sd_net",
            "tele_sd_processor",
            "tele_sd_total_failed_pieces",
            "tele_sd_total_intakes",
            "tele_sd_total_pieces",
            "tele_sd_total_points",
        )
        val ENDGAME_TIMS_DATA = listOf(
            "Endgame",
            "endgame_total_points",
            "time_left_to_climb",
            "cage_level",
            "cage_fail",
        )
        val ENDGAME_TEAMS_DATA = listOf(
            "Endgame Data",
            "park_percent",
            "parks",
            "avg_time_left_to_climb",
            "endgame_avg_total_points",
            "endgame_max_total_points",
            "endgame_sd_total_points",
            "cage_attempts_shallow",
            "cage_attempts_deep",
            "cage_attempts_all",
            "cage_successes_shallow",
            "cage_successes_deep",
            "cage_successes_all",
            "cage_fails_shallow",
            "cage_fails_deep",
            "cage_fails_all",
            "mode_cage_level",
            "cage_percent_success_all",
            "cage_percent_success_shallow",
            "cage_percent_success_deep",

            "Expected Data",
            "avg_expected_cycle_time",
            "avg_expected_cycles",
            "sd_expected_cycle_time",
            "sd_expected_cycles",
            "min_expected_cycle_time",
            "max_expected_cycle_time",
            "max_expected_cycles",
            "min_expected_cycles",
            "median_nonzero_expected_cycle_time",
            "median_nonzero_expected_cycles",

            )

        /**2025  Team Datapoints**/
        val PIT_DATA_TEAMS: List<String> = listOf(
            "Pit Data",
            "drivetrain",
            "max_climb",
            "algae_intake_mech",
            "reef_score_ability",
            "can_leave",
            "algae_score_mech",
            "weight",
        )

        /**2025 Stand Strategist Team Datapoints**/
        val STAND_STRAT_DATA_TEAMS: List<String> = listOf(
            "Stand Strat Data",
            "Stand Strat Notes",
            "avg_defense_rating",
            "matches_played_against_defense",
            "matches_played_defense",
            "auto_strategies_team",
            "strengths",
            "weaknesses",
            "can_intake_ground",
            "team_notes"
        )
        val STAND_STRAT_DATA_TIMS: List<String> = listOf(
            "Stand Strategist",
            "played_defense",
            "played_against_defense",
            "defense_rating",
            "broken_mechanism",
            "hp_team_number",
            "tim_auto_strategies",
            "tim_notes"
        )

        /**2025 Driver Data Team Datapoints**/
        val DRIVER_DATA_TEAMS: List<String> = listOf(
            "Driver Data",
            "driver_ability",
            "driver_field_awareness",
            "driver_agility",
            "matches_died",
            "matches_tippy",
            "can_cross_barge",
        )

        /**2025 Other Tim Datapoints**/
        val OTHER_TIM_DATA: List<String> = listOf(
            "flagged",
            "Totals",
            "total_pieces",
            "total_failed_pieces",
            "total_points",
            "total_intakes",
        )

        // TIM data points used for most games
        val DATAPOINT_TIMS_CONSTANTS: List<String> = listOf(
            "current_avg_rps_tim",
            "flagged"
        )

        /**Adds the tele, endamge, and auto datapoints from the obj tims schema**/
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_PLAYED =
            DATAPOINT_TIMS_CONSTANTS + AUTO_TIMS_DATA + TELE_TIMS_DATA + ENDGAME_TIMS_DATA + OTHER_TIM_DATA + STAND_STRAT_DATA_TIMS

        /**Auto datapoints used for most games**/
        val DATAPOINT_AUTO_CONSTANTS: List<String> = listOf(
            "start_position",
            "has_preload",
            "scored_preload",
            "leave",
            "mode_start_position",
            "position_zero_starts",
            "position_one_starts",
            "position_two_starts",
            "position_three_starts",
            "position_four_starts",
            "position_five_starts",
            "preloaded_starts",
            "preload_successes",
            "auto_preload_percent_success",
            "auto_avg_total_pieces",
            "auto_max_total_pieces",
            "auto_sd_total_pieces",
            "auto_avg_total_failed_pieces",
            "auto_max_total_failed_pieces",
            "auto_sd_total_failed_pieces",
            "auto_avg_total_intakes",
            "auto_max_total_intakes",
            "auto_sd_total_intakes",
            "leave_successes",
            "auto_avg_total_points",
            "auto_max_total_points",
            "auto_sd_total_points",
        )

        /**Adds the auto datapoints from the obj tim schema and obj team schema**/
        val AUTO_DATAPOINTS = AUTO_TEAMS_DATA + AUTO_TEAMS_DATA + DATAPOINT_AUTO_CONSTANTS

        /*
        List of all Team datapoints
        If a datapoint is added here, a lfm datapoint counterpart will be added, if the
        datapoint should be displayed as is in both team details and lfm team details,
        add it to the TEAM_AND_LFM_SHARED_DATAPOINTS list, if it shouldn't be displayed
        at all in lfm team details, add it to the TEAM_DATAPOINTS_NOT_IN_LFM list.
        If the datapoint should be graphable, add it to the GRAPHABLE list.
        If the datapoint should be rankable, add it to the RANKABLE_FIELDS list.
        */
        /**Team Details Fields to be displayed for most games**/
        val FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS_CONSTANTS: List<String> = listOf(
            "See Matches",
            "Notes Label",
            "Notes",
            "matches_with_data",
            "current_rps",
            "predicted_rps",
            "current_avg_rps",
            "current_rank",
            "predicted_rank",
            "first_pickability",
            "max_total_intakes",
            "avg_total_points",
            "max_total_points",
            "sd_total_points",
            "avg_total_pieces",
            "avg_total_failed_pieces",
            "max_total_pieces",
            "max_total_failed_pieces",
            "avg_total_intakes",
            "sd_total_pieces",
            "sd_total_failed_pieces",
            "sd_total_intakes",
            "has_compatible_auto",
            "matches_played_defense",
            "matches_played_against_defense",
            "matches_with_broken_mechanism",
            "offensive_second_pickability",
            "defensive_second_pickability"
        )
        val MATT_DATAPOINTS_TEAM: List<String> = listOf(
            "Matt's Ratings",
            "electrical_robustness",
            "mechanical_robustness",
            "robot_complexity",
            "architecture",
            "matt_notes"
        )

        /**Adds the tele, endgame, and auto datapoints from the obj team schema**/
        val FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS =
            FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS_CONSTANTS + AUTO_TEAMS_DATA + TELE_TEAMS_DATA + ENDGAME_TEAMS_DATA + PIT_DATA_TEAMS + STAND_STRAT_DATA_TEAMS + DRIVER_DATA_TEAMS + MATT_DATAPOINTS_TEAM

        // List of headers in team details and lfm team details
        val CATEGORY_NAMES = listOf(
            "Auto",
            "Tele",
            "Endgame",
            "Fouls",
            "Stand Strategist",
            "Totals",
            "Other Data",
            "See Matches",
            "Notes",
            "Notes Label",
            "Auto Data",
            "L4M Auto Data",
            "Tele Data",
            "L4M Tele Data",
            "Endgame Data",
            "L4M Endgame Data",
            "Expected Data",
            "L4M Expected Data",
            "Pit Data",
            "Stand Strat Data",
            "L4M Stand Strat Data",
            "Stand Strat Notes",
            "TIM",
            "TEAM",
            "Driver Data",
            "Matt's Ratings"
        )

        // List of datapoints that appear in both team details and lfm team details
        val TEAM_AND_LFM_SHARED_DATA_POINTS = listOf(
            "See Matches",
            "current_rps",
            "predicted_rps",
            "current_avg_rps",
            "current_rank",
            "predicted_rank",
            "matches_with_broken_mechanism",
            "time_left_to_climb",
            "driver_ability",
            "driver_field_awareness",
            "driver_agility",
            "matches_died",
            "matches_tippy",
            "can_cross_barge",
            "drivetrain",
            "max_climb",
            "algae_intake_mech",
            "reef_score_ability",
            "can_leave",
            "algae_score_mech",
            "weight",
            "Stand Strat Notes",
            "avg_defense_rating",
            "foul_cc"
        )

        // List of data points that are in team details but should not be in lfm team details
        val TEAM_DATA_POINTS_NOT_IN_LFM: List<String> = listOf(
            "drivetrain",
            "max_climb",
            "algae_intake_mech",
            "reef_score_ability",
            "can_leave",
            "algae_score_mech",
            "weight",
            "has_compatible_auto",
            "matches_with_data",
            "electrical_robustness",
            "mechanical_robustness",
            "robot_complexity",
            "architecture",
            "matt_notes",
            "auto_strategies_team",
            "strengths",
            "weaknesses",
            "team_notes",
            "can_intake_ground",
            "avg_time_left_to_climb",
            "offensive_second_pickability",
            "defensive_second_pickability"
        )

        // List of datapoints to be displayed in lfm team details
        val FIELDS_TO_BE_DISPLAYED_LFM: List<String> =
            FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS.generateLFMDatapointList()

        // TIM data points
        val TIM_TO_TEAM: Map<String, String> = mapOf(
            "current_avg_rps_tim" to "current_avg_rps",
            "Auto" to "Auto Data",
            "start_position" to "mode_start_position",
            "has_preload" to "preloaded_starts",
            "scored_preload" to "preload_successes",
            "auto_total_pieces" to "auto_avg_total_pieces",
            "auto_total_failed_pieces" to "auto_avg_total_failed_pieces",
            "auto_total_intakes" to "auto_avg_total_intakes",
            "auto_total_points" to "auto_avg_total_points",
            "leave" to "leave_successes",
            "Tele" to "Tele Data",
            "tele_total_pieces" to "tele_avg_total_pieces",
            "tele_total_failed_pieces" to "tele_avg_total_failed_pieces",
            "tele_total_intakes" to "tele_avg_total_intakes",
            "tele_total_points" to "tele_avg_total_points",
            "expected_cycles" to "avg_expected_cycles",
            "Endgame" to "Endgame Data",
            "park" to "parks",
            "cage_level" to "mode_cage_level",
            "cage_fail" to "cage_percent_success_all",
            "time_left_to_climb" to "avg_time_left_to_climb",
            "endgame_total_points" to "endgame_avg_total_points",
            "Stand Strategist" to "Stand Strat Data",
            "played_defense" to "matches_played_defense",
            "defense_rating" to "avg_defense_rating",
            "broken_mechanism" to "matches_with_broken_mechanism",
            "played_against_defense" to "matches_played_against_defense",
            "tim_notes" to "team_notes",
            "total_points" to "avg_total_points",
            "tele_incap" to "tele_avg_incap",
            "auto_coral_L1" to "auto_avg_coral_L1",
            "auto_coral_L2" to "auto_avg_coral_L2",
            "auto_coral_L3" to "auto_avg_coral_L3",
            "auto_coral_L4" to "auto_avg_coral_L4",
            "auto_drop_algae" to "auto_avg_drop_algae",
            "auto_drop_coral" to "auto_avg_drop_coral",
            "auto_fail_coral_L1" to "auto_avg_fail_coral_L1",
            "auto_fail_coral_L2" to "auto_avg_fail_coral_L2",
            "auto_fail_coral_L3" to "auto_avg_fail_coral_L3",
            "auto_fail_coral_L4" to "auto_avg_fail_coral_L4",
            "auto_fail_net" to "auto_avg_fail_net",
            "auto_fail_processor" to "auto_avg_fail_processor",
            "auto_intake_ground_algae" to "auto_avg_intake_ground_algae",
            "auto_intake_ground_coral" to "auto_avg_intake_ground_coral",
            "auto_intake_reef" to "auto_avg_intake_reef",
            "auto_intake_station" to "auto_avg_intake_station",
            "auto_net" to "auto_avg_net",
            "auto_processor" to "auto_avg_processor",
            "tele_coral_L1" to "tele_avg_coral_L1",
            "tele_coral_L2" to "tele_avg_coral_L2",
            "tele_coral_L3" to "tele_avg_coral_L3",
            "tele_coral_L4" to "tele_avg_coral_L4",
            "tele_drop_algae" to "tele_avg_drop_algae",
            "tele_drop_coral" to "tele_avg_drop_coral",
            "tele_fail_coral_L1" to "tele_avg_fail_coral_L1",
            "tele_fail_coral_L2" to "tele_avg_fail_coral_L2",
            "tele_fail_coral_L3" to "tele_avg_fail_coral_L3",
            "tele_fail_coral_L4" to "tele_avg_fail_coral_L4",
            "tele_fail_net" to "tele_avg_fail_net",
            "tele_fail_processor" to "tele_avg_fail_processor",
            "tele_intake_ground_algae" to "tele_avg_intake_ground_algae",
            "tele_intake_ground_coral" to "tele_avg_intake_ground_coral",
            "tele_intake_reef" to "tele_avg_intake_reef",
            "tele_intake_station" to "tele_avg_intake_station",
            "tele_net" to "tele_avg_net",
            "tele_processor" to "tele_avg_processor",
            "auto_intakes_ground" to "auto_avg_intake_ground_algae",
            "died" to "matches_died",
            "was_tippy" to "matches_tippy",
            "can_cross_barge" to "can_cross_barge",
            "total_pieces" to "avg_total_pieces",
            "total_failed_pieces" to "avg_total_failed_pieces",
            "total_intakes" to "avg_total_intakes",
            "auto_strategies_tim" to "auto_strategies_team"
        )

        // List of datapoints that pertain to the team's rank
        val FIELDS_TO_BE_DISPLAYED_RANKING: List<String> = listOf(
            "current_rank", "current_avg_rps", "current_rps", "predicted_rps", "predicted_rank"
        )

        // List of datapoints to be shown in the header of match details if the match has not been played yet
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_HEADER_NOT_PLAYED: List<String> = listOf(
            "predicted_score",
            "predicted_coral_rp",
            "predicted_barge_rp",
            "predicted_auto_rp",
            "win_chance"
        )

        // List of datapoints to be shown in the header of match details if the match has been played
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_HEADER_PLAYED: List<String> = listOf(
            "actual_score", "actual_coral_rp", "actual_barge_rp", "actual_auto_rp", "win_chance"
        )

        // Map of team datapoints from team details to tim datapoints that are graphed per match
        val GRAPHABLE = mapOf(
            "matches_with_broken_mechanism" to "broken_mechanism",
            "mode_start_position" to "start_position",
            "position_zero_starts" to "start_position",
            "position_one_starts" to "start_position",
            "position_two_starts" to "start_position",
            "position_three_starts" to "start_position",
            "position_four_starts" to "start_position",
            "position_five_starts" to "start_position",
            "preloaded_starts" to "has_preload",
            "preload_successes" to "scored_preload",
            "auto_preload_percent_success" to "scored_preload",
            "auto_avg_total_pieces" to "auto_total_pieces",
            "auto_max_total_pieces" to "auto_total_pieces",
            "auto_sd_total_pieces" to "auto_total_pieces",
            "auto_avg_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_max_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_sd_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_avg_total_intakes" to "auto_total_intakes",
            "auto_max_total_intakes" to "auto_total_intakes",
            "auto_sd_total_intakes" to "auto_total_intakes",
            "leave_successes" to "leave",
            "auto_avg_total_points" to "auto_total_points",
            "auto_max_total_points" to "auto_total_points",
            "auto_sd_total_points" to "auto_total_points",
            "tele_avg_total_pieces" to "tele_total_pieces",
            "tele_max_total_pieces" to "tele_total_pieces",
            "tele_sd_total_pieces" to "tele_total_pieces",
            "tele_avg_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_max_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_sd_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_avg_total_intakes" to "tele_total_intakes",
            "tele_max_total_intakes" to "tele_total_intakes",
            "tele_sd_total_intakes" to "tele_total_intakes",
            "tele_avg_total_points" to "tele_total_points",
            "tele_max_total_points" to "tele_total_points",
            "tele_sd_total_points" to "tele_total_points",
            "matches_incap" to "tele_incap",
            "tele_avg_incap" to "tele_incap",
            "max_tele_incap" to "tele_incap",
            "tele_sd_incap" to "tele_incap",
            "total_incap_time" to "tele_incap",
            "median_nonzero_tele_incap" to "tele_incap",
            "matches_played_defense" to "played_defense",
            "driver_ability" to "driver_ability",
            "park_percent" to "park",
            "parks" to "park",
            "avg_time_left_to_climb" to "time_left_to_climb",
            "endgame_avg_total_points" to "endgame_total_points",
            "endgame_max_total_points" to "endgame_total_points",
            "endgame_sd_total_points" to "endgame_total_points",
            "max_total_intakes" to "total_intakes",
            "avg_total_points" to "total_points",
            "max_total_points" to "total_points",
            "sd_total_points" to "total_points",
            "avg_defense_rating" to "defense_rating",
            "avg_expected_cycle_time" to "expected_cycle_time",
            "avg_expected_cycles" to "expected_cycles",
            "sd_expected_cycle_time" to "expected_cycle_time",
            "sd_expected_cycles" to "expected_cycles",
            "min_expected_cycle_time" to "expected_cycle_time",
            "max_expected_cycle_time" to "expected_cycle_time",
            "max_expected_cycles" to "expected_cycles",
            "min_expected_cycles" to "expected_cycles",
            "median_nonzero_expected_cycle_time" to "expected_cycle_time",
            "median_nonzero_expected_cycles" to "expected_cycles",
            "auto_avg_coral_L1" to "auto_coral_L1",
            "auto_sd_coral_L1" to "auto_coral_L1",
            "auto_max_coral_L1" to "auto_coral_L1",
            "auto_avg_fail_coral_L1" to "auto_fail_coral_L1",
            "auto_sd_fail_coral_L1" to "auto_fail_coral_L1",
            "auto_max_fail_coral_L1" to "auto_fail_coral_L1",
            "auto_coral_L1_percent_success" to "auto_coral_L1",
            "tele_avg_coral_L1" to "tele_coral_L1",
            "tele_sd_coral_L1" to "tele_coral_L1",
            "tele_max_coral_L1" to "tele_coral_L1",
            "tele_avg_fail_coral_L1" to "tele_fail_coral_L1",
            "tele_sd_fail_coral_L1" to "tele_fail_coral_L1",
            "tele_max_fail_coral_L1" to "tele_fail_coral_L1",
            "tele_coral_L1_percent_success" to "tele_coral_L1",
            "auto_avg_coral_L2" to "auto_coral_L2",
            "auto_sd_coral_L2" to "auto_coral_L2",
            "auto_max_coral_L2" to "auto_coral_L2",
            "auto_avg_fail_coral_L2" to "auto_fail_coral_L2",
            "auto_sd_fail_coral_L2" to "auto_fail_coral_L2",
            "auto_max_fail_coral_L2" to "auto_fail_coral_L2",
            "auto_coral_L2_percent_success" to "auto_coral_L2",
            "tele_avg_coral_L2" to "tele_coral_L2",
            "tele_sd_coral_L2" to "tele_coral_L2",
            "tele_max_coral_L2" to "tele_coral_L2",
            "tele_avg_fail_coral_L2" to "tele_fail_coral_L2",
            "tele_sd_fail_coral_L2" to "tele_fail_coral_L2",
            "tele_max_fail_coral_L2" to "tele_fail_coral_L2",
            "tele_coral_L2_percent_success" to "tele_coral_L2",
            "auto_avg_coral_L3" to "auto_coral_L3",
            "auto_sd_coral_L3" to "auto_coral_L3",
            "auto_max_coral_L3" to "auto_coral_L3",
            "auto_avg_fail_coral_L3" to "auto_fail_coral_L3",
            "auto_sd_fail_coral_L3" to "auto_fail_coral_L3",
            "auto_max_fail_coral_L3" to "auto_fail_coral_L3",
            "auto_coral_L3_percent_success" to "auto_coral_L3",
            "tele_avg_coral_L3" to "tele_coral_L3",
            "tele_sd_coral_L3" to "tele_coral_L3",
            "tele_max_coral_L3" to "tele_coral_L3",
            "tele_avg_fail_coral_L3" to "tele_fail_coral_L3",
            "tele_sd_fail_coral_L3" to "tele_fail_coral_L3",
            "tele_max_fail_coral_L3" to "tele_fail_coral_L3",
            "tele_coral_L3_percent_success" to "tele_coral_L3",
            "auto_avg_coral_L4" to "auto_coral_L4",
            "auto_sd_coral_L4" to "auto_coral_L4",
            "auto_max_coral_L4" to "auto_coral_L4",
            "auto_avg_fail_coral_L4" to "auto_fail_coral_L4",
            "auto_sd_fail_coral_L4" to "auto_fail_coral_L4",
            "auto_max_fail_coral_L4" to "auto_fail_coral_L4",
            "auto_coral_L4_percent_success" to "auto_coral_L4",
            "tele_avg_coral_L4" to "tele_coral_L4",
            "tele_sd_coral_L4" to "tele_coral_L4",
            "tele_max_coral_L4" to "tele_coral_L4",
            "tele_avg_fail_coral_L4" to "tele_fail_coral_L4",
            "tele_sd_fail_coral_L4" to "tele_fail_coral_L4",
            "tele_max_fail_coral_L4" to "tele_fail_coral_L4",
            "tele_coral_L4_percent_success" to "tele_coral_L4",
            "auto_avg_drop_coral" to "auto_drop_coral",
            "auto_sd_drop_coral" to "auto_drop_coral",
            "auto_max_drop_coral" to "auto_drop_coral",
            "tele_avg_drop_coral" to "tele_drop_coral",
            "tele_sd_drop_coral" to "tele_drop_coral",
            "tele_max_drop_coral" to "tele_drop_coral",
            "auto_avg_drop_algae" to "auto_drop_algae",
            "auto_sd_drop_algae" to "auto_drop_algae",
            "auto_max_drop_algae" to "auto_drop_algae",
            "tele_avg_drop_algae" to "tele_drop_algae",
            "tele_sd_drop_algae" to "tele_drop_algae",
            "tele_max_drop_algae" to "tele_drop_algae",
            "auto_avg_net" to "auto_net",
            "auto_sd_net" to "auto_net",
            "auto_max_net" to "auto_net",
            "auto_avg_fail_net" to "auto_fail_net",
            "auto_sd_fail_net" to "auto_fail_net",
            "auto_max_fail_net" to "auto_fail_net",
            "auto_net_percent_success" to "auto_net",
            "tele_avg_net" to "tele_net",
            "tele_sd_net" to "tele_net",
            "tele_max_net" to "tele_net",
            "tele_avg_fail_net" to "tele_fail_net",
            "tele_sd_fail_net" to "tele_fail_net",
            "tele_max_fail_net" to "tele_fail_net",
            "tele_net_percent_success" to "tele_net",
            "auto_avg_processor" to "auto_processor",
            "auto_sd_processor" to "auto_processor",
            "auto_max_processor" to "auto_processor",
            "auto_avg_fail_processor" to "auto_fail_processor",
            "auto_sd_fail_processor" to "auto_fail_processor",
            "auto_max_fail_processor" to "auto_fail_processor",
            "auto_processor_percent_success" to "auto_processor",
            "tele_avg_processor" to "tele_processor",
            "tele_sd_processor" to "tele_processor",
            "tele_max_processor" to "tele_processor",
            "tele_avg_fail_processor" to "tele_fail_processor",
            "tele_sd_fail_processor" to "tele_fail_processor",
            "tele_max_fail_processor" to "tele_fail_processor",
            "tele_processor_percent_success" to "tele_processor",
            "auto_avg_intake_ground_algae" to "auto_intake_ground_algae",
            "auto_sd_intake_ground_algae" to "auto_intake_ground_algae",
            "auto_max_intake_ground_algae" to "auto_intake_ground_algae",
            "tele_avg_intake_ground_algae" to "tele_intake_ground_algae",
            "tele_sd_intake_ground_algae" to "tele_intake_ground_algae",
            "tele_max_intake_ground_algae" to "tele_intake_ground_algae",
            "auto_avg_intake_ground_coral" to "auto_intake_ground_coral",
            "auto_sd_intake_ground_coral" to "auto_intake_ground_coral",
            "auto_max_intake_ground_coral" to "auto_intake_ground_coral",
            "tele_avg_intake_ground_coral" to "tele_intake_ground_coral",
            "tele_sd_intake_ground_coral" to "tele_intake_ground_coral",
            "tele_max_intake_ground_coral" to "tele_intake_ground_coral",
            "auto_avg_intake_reef" to "auto_intake_reef",
            "auto_sd_intake_reef" to "auto_intake_reef",
            "auto_max_intake_reef" to "auto_intake_reef",
            "tele_avg_intake_reef" to "tele_intake_reef",
            "tele_sd_intake_reef" to "tele_intake_reef",
            "tele_max_intake_reef" to "tele_intake_reef",
            "auto_avg_intake_station" to "auto_intake_station",
            "auto_sd_intake_station" to "auto_intake_station",
            "auto_max_intake_station" to "auto_intake_station",
            "tele_avg_intake_station" to "tele_intake_station",
            "tele_sd_intake_station" to "tele_intake_station",
            "tele_max_intake_station" to "tele_intake_station",
            "cage_attempts_all" to "cage_level",
            "cage_fails_all" to "cage_level",
            "cage_successes_all" to "cage_level",
            "cage_percent_success_all" to "cage_level",
            "cage_attempts_deep" to "cage_level",
            "cage_fails_deep" to "cage_level",
            "cage_successes_deep" to "cage_level",
            "cage_percent_success_deep" to "cage_level",
            "cage_attempts_shallow" to "cage_level",
            "cage_fails_shallow" to "cage_level",
            "cage_successes_shallow" to "cage_level",
            "cage_percent_success_shallow" to "cage_level",
            "matches_died" to "died",
            "matches_tippy" to "was_tippy",
            "can_cross_barge" to "can_cross_barge",
            "mode_cage_level" to "cage_level",
            "avg_total_pieces" to "total_pieces",
            "avg_total_failed_pieces" to "total_failed_pieces",
            "avg_total_intakes" to "total_intakes",
        ).addLFMCounterparts()

        // Map of what datapoints the starting position datapoints in team details should show when their graphs are viewed
        val STARTING_POSITION_GRAPHING = mapOf(
            "mode_start_position" to "start_position",
            "position_zero_starts" to "start_position",
            "position_one_starts" to "start_position",
            "position_two_starts" to "start_position",
            "position_three_starts" to "start_position",
            "position_four_starts" to "start_position",
            "position_five_starts" to "start_position",
        ).addLFMCounterparts()

        // List of possible cage levels (2025 ReefScape exclusive)
        val CAGE_LEVELS = listOf("N", "S", "D")

        // List of datapoints that pertain to a team's driver
        val DRIVER_DATA: List<String> = listOf(
            "driver_agility", "driver_field_awareness", "driver_ability"
        )

        val RANKING_DATA = listOf(
            "current_avg_rps", "predicted_rps", "current_rps", "predicted_rank", "current_rank"
        )

        // List of datapoints that should be displayed as percentages
        val PERCENT_DATA: List<String> = listOf(
            "auto_coral_L1_percent_success",
            "auto_coral_L2_percent_success",
            "auto_coral_L3_percent_success",
            "auto_coral_L4_percent_success",
            "auto_net_percent_success",
            "auto_preload_percent_success",
            "auto_processor_percent_success",
            "tele_coral_L1_percent_success",
            "tele_coral_L2_percent_success",
            "tele_coral_L3_percent_success",
            "tele_coral_L4_percent_success",
            "tele_net_percent_success",
            "tele_processor_percent_success",
            "cage_percent_success_all",
            "park_percent",
            "win_chance"
        ).addLFMCounterparts()

        // List of datapoints gathered in Pit Collection
        val PIT_DATA: List<String> = listOf(
            "drivetrain",
            "max_climb",
            "algae_intake_mech",
            "reef_score_ability",
            "can_leave",
            "algae_score_mech",
            "weight",
        )

        // List of datapoints gathered in Stand Strategist to be displayed in stand strat notes
        val STAND_STRAT_NOTES_DATA: List<String> = listOf(
            "auto_strategies_team",
            "tim_auto_strategies",
            "strengths",
            "weaknesses",
            "team_notes",
            "tim_notes"
        )

        /*
        List of rankable datapoints
        The boolean is if it should be sorted descending,
        not if it is rankable or not.
        True means descending and false means ascending.
        Datapoints that are negative attributes should be set to false,
        positive attributes should be set to true.
        Pit data should be set to false.
        All items in the list are rankable no matter what.
        */
        val RANKABLE_FIELDS = mapOf(
            "matches_with_broken_mechanism" to false,
            "preloaded_starts" to true,
            "preload_successes" to true,
            "auto_preload_percent_success" to true,
            "auto_avg_total_pieces" to true,
            "auto_sd_total_pieces" to true,
            "auto_max_total_pieces" to true,
            "auto_avg_total_failed_pieces" to false,
            "auto_max_total_failed_pieces" to false,
            "auto_sd_total_failed_pieces" to false,
            "leave_successes" to true,
            "auto_avg_total_intakes" to true,
            "auto_max_total_intakes" to true,
            "auto_sd_total_intakes" to true,
            "auto_avg_total_points" to true,
            "auto_max_total_points" to true,
            "auto_sd_total_points" to true,
            "tele_avg_drop" to false,
            "tele_max_drop" to false,
            "tele_sd_drop" to false,
            "tele_avg_total_intakes" to true,
            "tele_max_total_intakes" to true,
            "tele_sd_total_intakes" to true,
            "tele_avg_total_pieces" to true,
            "tele_sd_total_pieces" to true,
            "tele_max_total_pieces" to true,
            "tele_avg_total_failed_pieces" to false,
            "tele_max_total_failed_pieces" to false,
            "tele_sd_total_failed_pieces" to false,
            "tele_avg_total_points" to true,
            "tele_max_total_points" to true,
            "tele_sd_total_points" to true,
            "tele_avg_incap" to false,
            "median_nonzero_tele_incap" to false,
            "max_tele_incap" to false,
            "tele_sd_incap" to false,
            "tele_avg_incap" to false,
            "total_incap_time" to false,
            "matches_incap" to false,
            "matches_played_defense" to true,
            "matches_played_against_defense" to true,
            "driver_ability" to true,
            "driver_field_awareness" to true,
            "driver_agility" to true,
            "matches_died" to true,
            "matches_tippy" to false,
            "can_cross_barge" to true,
            "foul_cc" to false,
            "park_percent" to true,
            "parks" to true,
            "avg_time_left_to_climb" to false,
            "endgame_avg_total_points" to true,
            "endgame_max_total_points" to true,
            "endgame_sd_total_points" to true,
            "max_total_intakes" to true,
            "avg_total_points" to true,
            "max_total_points" to true,
            "sd_total_points" to true,
            // pit data points
            "max_climb" to true,
            "algae_intake_mech" to true,
            "reef_score_ability" to true,
            "can_leave" to false,
            "algae_score_mech" to true,
            "coral_intake_mech" to true,
            "drivetrain" to true,
            "weight" to true,

            "avg_expected_cycle_time" to false,
            "avg_expected_cycles" to true,
            "sd_expected_cycle_time" to false,
            "sd_expected_cycles" to true,
            "min_expected_cycle_time" to false,
            "min_expected_cycles" to true,
            "max_expected_cycle_time" to false,
            "max_expected_cycles" to true,
            "median_nonzero_expected_cycle_time" to false,
            "median_nonzero_expected_cycles" to true,
            "avg_defense_rating" to true,
            "auto_avg_coral_L1" to true,
            "auto_sd_coral_L1" to true,
            "auto_max_coral_L1" to true,
            "auto_avg_fail_coral_L1" to false,
            "auto_sd_fail_coral_L1" to false,
            "auto_max_fail_coral_L1" to false,
            "auto_coral_L1_percent_success" to true,
            "tele_avg_coral_L1" to true,
            "tele_sd_coral_L1" to true,
            "tele_max_coral_L1" to true,
            "tele_avg_fail_coral_L1" to false,
            "tele_sd_fail_coral_L1" to false,
            "tele_max_fail_coral_L1" to false,
            "tele_coral_L1_percent_success" to true,
            "auto_avg_coral_L2" to true,
            "auto_sd_coral_L2" to true,
            "auto_max_coral_L2" to true,
            "auto_avg_fail_coral_L2" to false,
            "auto_sd_fail_coral_L2" to false,
            "auto_max_fail_coral_L2" to false,
            "auto_coral_L2_percent_success" to true,
            "tele_avg_coral_L2" to true,
            "tele_sd_coral_L2" to true,
            "tele_max_coral_L2" to true,
            "tele_avg_fail_coral_L2" to false,
            "tele_sd_fail_coral_L2" to false,
            "tele_max_fail_coral_L2" to false,
            "tele_coral_L2_percent_success" to true,
            "auto_avg_coral_L3" to true,
            "auto_sd_coral_L3" to true,
            "auto_max_coral_L3" to true,
            "auto_avg_fail_coral_L3" to false,
            "auto_sd_fail_coral_L3" to false,
            "auto_max_fail_coral_L3" to false,
            "auto_coral_L3_percent_success" to true,
            "tele_avg_coral_L3" to true,
            "tele_sd_coral_L3" to true,
            "tele_max_coral_L3" to true,
            "tele_avg_fail_coral_L3" to false,
            "tele_sd_fail_coral_L3" to false,
            "tele_max_fail_coral_L3" to false,
            "tele_coral_L3_percent_success" to true,
            "auto_avg_coral_L4" to true,
            "auto_sd_coral_L4" to true,
            "auto_max_coral_L4" to true,
            "auto_avg_fail_coral_L4" to false,
            "auto_sd_fail_coral_L4" to false,
            "auto_max_fail_coral_L4" to false,
            "auto_coral_L4_percent_success" to true,
            "tele_avg_coral_L4" to true,
            "tele_sd_coral_L4" to true,
            "tele_max_coral_L4" to true,
            "tele_avg_fail_coral_L4" to false,
            "tele_sd_fail_coral_L4" to false,
            "tele_max_fail_coral_L4" to false,
            "tele_coral_L4_percent_success" to true,
            "auto_avg_drop_coral" to false,
            "auto_sd_drop_coral" to false,
            "auto_max_drop_coral" to false,
            "tele_avg_drop_coral" to false,
            "tele_sd_drop_coral" to false,
            "tele_max_drop_coral" to false,
            "auto_avg_drop_algae" to false,
            "auto_sd_drop_algae" to false,
            "auto_max_drop_algae" to false,
            "tele_avg_drop_algae" to false,
            "tele_sd_drop_algae" to false,
            "tele_max_drop_algae" to false,
            "auto_avg_net" to true,
            "auto_sd_net" to true,
            "auto_max_net" to true,
            "auto_avg_fail_net" to false,
            "auto_sd_fail_net" to false,
            "auto_max_fail_net" to false,
            "auto_net_percent_success" to true,
            "tele_avg_net" to true,
            "tele_sd_net" to true,
            "tele_max_net" to true,
            "tele_avg_fail_net" to false,
            "tele_sd_fail_net" to false,
            "tele_max_fail_net" to false,
            "tele_net_percent_success" to true,
            "auto_avg_processor" to true,
            "auto_sd_processor" to true,
            "auto_max_processor" to true,
            "auto_avg_fail_processor" to false,
            "auto_sd_fail_processor" to false,
            "auto_max_fail_processor" to false,
            "auto_processor_percent_success" to true,
            "tele_avg_processor" to true,
            "tele_sd_processor" to true,
            "tele_max_processor" to true,
            "tele_avg_fail_processor" to false,
            "tele_sd_fail_processor" to false,
            "tele_max_fail_processor" to false,
            "tele_processor_percent_success" to true,
            "auto_avg_intake_ground_algae" to true,
            "auto_sd_intake_ground_algae" to true,
            "auto_max_intake_ground_algae" to true,
            "tele_avg_intake_ground_algae" to true,
            "tele_sd_intake_ground_algae" to true,
            "tele_max_intake_ground_algae" to true,
            "auto_avg_intake_ground_coral" to true,
            "auto_sd_intake_ground_coral" to true,
            "auto_max_intake_ground_coral" to true,
            "tele_avg_intake_ground_coral" to true,
            "tele_sd_intake_ground_coral" to true,
            "tele_max_intake_ground_coral" to true,
            "auto_avg_intake_reef" to true,
            "auto_sd_intake_reef" to true,
            "auto_max_intake_reef" to true,
            "tele_avg_intake_reef" to true,
            "tele_sd_intake_reef" to true,
            "tele_max_intake_reef" to true,
            "auto_avg_intake_station" to true,
            "auto_sd_intake_station" to true,
            "auto_max_intake_station" to true,
            "tele_avg_intake_station" to true,
            "tele_sd_intake_station" to true,
            "tele_max_intake_station" to true,
            "cage_attempts_all" to true,
            "cage_fails_all" to false,
            "cage_successes_all" to true,
            "cage_percent_success_all" to true,
            "cage_attempts_deep" to true,
            "cage_fails_deep" to false,
            "cage_successes_deep" to true,
            "cage_percent_success_deep" to true,
            "cage_attempts_shallow" to true,
            "cage_fails_shallow" to false,
            "cage_successes_shallow" to true,
            "cage_percent_success_shallow" to true,
            "avg_total_pieces" to true,
            "avg_total_failed_pieces" to false,
            "avg_total_intakes" to true,
            "electrical_robustness" to true,
            "mechanical_robustness" to true,
            "robot_complexity" to true,
            "current_rps" to true,
            "predicted_rps" to true,
            "current_avg_rps" to true,
            "first_pickability" to true,
            "matches_with_data" to true,
            "tele_avg_total_nonzero_pieces" to true,
            "has_compatible_auto" to true,
            "offensive_second_pickability" to true,
            "defensive_second_pickability" to true
        ).addLFMCounterparts()

        // Map of what certain values for pit datapoints should be ranked as
        val RANK_BY_PIT = mapOf(
            "True" to 1,
            "False" to 2,
            "Can't Intake Algae" to 0,
            "Algae Intake From Reef" to 1,
            "Algae Intake From Ground" to 2,
            "Algae Intake From Both" to 3,

            "Can't Intake Coral" to 0,
            "Coral Intake From Station" to 1,
            "Coral Intake From Ground" to 2,
            "Coral Intake From Both" to 3,

            "Can't Climb" to 0,
            "Can Climb Shallow" to 1,
            "Can Climb Deep" to 2,

            "Default Drivetrain" to 0,
            "Tank" to 1,
            "Mecanum" to 2,
            "Swerve" to 3,
            "Other" to 4,

            "Can't Score Algae" to 0,
            "Can Score Algae In Processor" to 1,
            "Can Score Algae In Net" to 2,
            "Can Score Algae In Both" to 3
        )


        /*
        List of datapoints that should be displayed with data bars, if enabled
        The boolean is if the data bar should start on the left or right,
        not if it is rankable or not.
        True means left to right and false means right to left.
        Datapoints that are negative attributes should be set to false,
        positive attributes should be set to true.
        */
        val FIELDS_WITH_DATA_BARS = mapOf(
            "matches_with_broken_mechanism" to false,
            "auto_avg_total_pieces" to true,
            "auto_max_total_pieces" to true,
            "auto_sd_total_pieces" to true,
            "auto_avg_total_failed_pieces" to false,
            "auto_max_total_failed_pieces" to false,
            "auto_sd_total_failed_pieces" to false,
            "auto_avg_total_intakes" to true,
            "auto_max_total_intakes" to true,
            "auto_sd_total_intakes" to true,
            "leave_successes" to true,
            "auto_avg_total_points" to true,
            "auto_max_total_points" to true,
            "auto_sd_total_points" to true,
            "tele_avg_total_pieces" to true,
            "tele_max_total_pieces" to true,
            "tele_sd_total_pieces" to true,
            "tele_avg_total_failed_pieces" to false,
            "tele_max_total_failed_pieces" to false,
            "tele_sd_total_failed_pieces" to false,
            "tele_avg_drop" to false,
            "tele_max_drop" to false,
            "tele_sd_drop" to false,
            "tele_avg_total_intakes" to true,
            "tele_max_total_intakes" to true,
            "tele_sd_total_intakes" to true,
            "tele_avg_total_points" to true,
            "tele_max_total_points" to true,
            "tele_sd_total_points" to true,
            "matches_incap" to false,
            "tele_avg_incap" to false,
            "max_tele_incap" to false,
            "tele_sd_incap" to false,
            "total_incap_time" to false,
            "matches_played_defense" to true,
            "driver_ability" to true,
            "driver_field_awareness" to true,
            "driver_agility" to true,
            "matches_died" to true,
            "matches_tippy" to false,
            "can_cross_barge" to true,
            "foul_cc" to false,
            "park_percent" to true,
            "parks" to true,
            "avg_time_left_to_climb" to false,
            "endgame_avg_total_points" to true,
            "endgame_max_total_points" to true,
            "endgame_sd_total_points" to true,
            "max_total_intakes" to true,
            "avg_total_points" to true,
            "max_total_points" to true,
            "sd_total_points" to true,
            "avg_expected_cycle_time" to true,
            "avg_expected_cycles" to true,
            "sd_expected_cycle_time" to true,
            "sd_expected_cycles" to true,
            "min_expected_cycle_time" to true,
            "min_expected_cycles" to true,
            "max_expected_cycle_time" to true,
            "max_expected_cycles" to true,
            "median_nonzero_expected_cycle_time" to true,
            "median_nonzero_expected_cycles" to true,
            "avg_defense_rating" to true,
            "auto_avg_coral_L1" to true,
            "auto_sd_coral_L1" to true,
            "auto_max_coral_L1" to true,
            "auto_avg_fail_coral_L1" to false,
            "auto_sd_fail_coral_L1" to false,
            "auto_max_fail_coral_L1" to false,
            "auto_coral_L1_percent_success" to true,
            "tele_avg_coral_L1" to true,
            "tele_sd_coral_L1" to true,
            "tele_max_coral_L1" to true,
            "tele_avg_fail_coral_L1" to false,
            "tele_sd_fail_coral_L1" to false,
            "tele_max_fail_coral_L1" to false,
            "tele_coral_L1_percent_success" to true,
            "auto_avg_coral_L2" to true,
            "auto_sd_coral_L2" to true,
            "auto_max_coral_L2" to true,
            "auto_avg_fail_coral_L2" to false,
            "auto_sd_fail_coral_L2" to false,
            "auto_max_fail_coral_L2" to false,
            "auto_coral_L2_percent_success" to true,
            "tele_avg_coral_L2" to true,
            "tele_sd_coral_L2" to true,
            "tele_max_coral_L2" to true,
            "tele_avg_fail_coral_L2" to false,
            "tele_sd_fail_coral_L2" to false,
            "tele_max_fail_coral_L2" to false,
            "tele_coral_L2_percent_success" to true,
            "auto_avg_coral_L3" to true,
            "auto_sd_coral_L3" to true,
            "auto_max_coral_L3" to true,
            "auto_avg_fail_coral_L3" to false,
            "auto_sd_fail_coral_L3" to false,
            "auto_max_fail_coral_L3" to false,
            "auto_coral_L3_percent_success" to true,
            "tele_avg_coral_L3" to true,
            "tele_sd_coral_L3" to true,
            "tele_max_coral_L3" to true,
            "tele_avg_fail_coral_L3" to false,
            "tele_sd_fail_coral_L3" to false,
            "tele_max_fail_coral_L3" to false,
            "tele_coral_L3_percent_success" to true,
            "auto_avg_coral_L4" to true,
            "auto_sd_coral_L4" to true,
            "auto_max_coral_L4" to true,
            "auto_avg_fail_coral_L4" to false,
            "auto_sd_fail_coral_L4" to false,
            "auto_max_fail_coral_L4" to false,
            "auto_coral_L4_percent_success" to true,
            "tele_avg_coral_L4" to true,
            "tele_sd_coral_L4" to true,
            "tele_max_coral_L4" to true,
            "tele_avg_fail_coral_L4" to false,
            "tele_sd_fail_coral_L4" to false,
            "tele_max_fail_coral_L4" to false,
            "tele_coral_L4_percent_success" to true,
            "auto_avg_drop_coral" to false,
            "auto_sd_drop_coral" to false,
            "auto_max_drop_coral" to false,
            "tele_avg_drop_coral" to false,
            "tele_sd_drop_coral" to false,
            "tele_max_drop_coral" to false,
            "auto_avg_drop_algae" to false,
            "auto_sd_drop_algae" to false,
            "auto_max_drop_algae" to false,
            "tele_avg_drop_algae" to false,
            "tele_sd_drop_algae" to false,
            "tele_max_drop_algae" to false,
            "auto_avg_net" to true,
            "auto_sd_net" to true,
            "auto_max_net" to true,
            "auto_avg_fail_net" to false,
            "auto_sd_fail_net" to false,
            "auto_max_fail_net" to false,
            "auto_net_percent_success" to true,
            "tele_avg_net" to true,
            "tele_sd_net" to true,
            "tele_max_net" to true,
            "tele_avg_fail_net" to false,
            "tele_sd_fail_net" to false,
            "tele_max_fail_net" to false,
            "tele_net_percent_success" to true,
            "auto_avg_processor" to true,
            "auto_sd_processor" to true,
            "auto_max_processor" to true,
            "auto_avg_fail_processor" to false,
            "auto_sd_fail_processor" to false,
            "auto_max_fail_processor" to false,
            "auto_processor_percent_success" to true,
            "tele_avg_processor" to true,
            "tele_sd_processor" to true,
            "tele_max_processor" to true,
            "tele_avg_fail_processor" to false,
            "tele_sd_fail_processor" to false,
            "tele_max_fail_processor" to false,
            "tele_processor_percent_success" to true,
            "auto_avg_intake_ground_algae" to true,
            "auto_sd_intake_ground_algae" to true,
            "auto_max_intake_ground_algae" to true,
            "tele_avg_intake_ground_algae" to true,
            "tele_sd_intake_ground_algae" to true,
            "tele_max_intake_ground_algae" to true,
            "auto_avg_intake_ground_coral" to true,
            "auto_sd_intake_ground_coral" to true,
            "auto_max_intake_ground_coral" to true,
            "tele_avg_intake_ground_coral" to true,
            "tele_sd_intake_ground_coral" to true,
            "tele_max_intake_ground_coral" to true,
            "auto_avg_intake_reef" to true,
            "auto_sd_intake_reef" to true,
            "auto_max_intake_reef" to true,
            "tele_avg_intake_reef" to true,
            "tele_sd_intake_reef" to true,
            "tele_max_intake_reef" to true,
            "auto_avg_intake_station" to true,
            "auto_sd_intake_station" to true,
            "auto_max_intake_station" to true,
            "tele_avg_intake_station" to true,
            "tele_sd_intake_station" to true,
            "tele_max_intake_station" to true,
            "cage_attempts_all" to true,
            "cage_fails_all" to false,
            "cage_successes_all" to true,
            "cage_percent_success_all" to true,
            "cage_attempts_deep" to true,
            "cage_fails_deep" to false,
            "cage_successes_deep" to true,
            "cage_percent_success_deep" to true,
            "cage_attempts_shallow" to true,
            "cage_fails_shallow" to false,
            "cage_successes_shallow" to true,
            "cage_percent_success_shallow" to true,
            "electrical_robustness" to true,
            "mechanical_robustness" to true,
            "robot_complexity" to false,
            "tele_avg_total_nonzero_pieces" to true,
            "offensive_second_pickability" to true,
            "defensive_second_pickability" to true,

            ).addLFMCounterparts()

        //String literal translations.
        const val TEAM_NUMBER = "teamNumber"
        const val MATCH_NUMBER = "matchNumber"
        const val PICKABILITY_MODE = "pickabilityMode"
        const val BLUE = "blue"
        const val RED = "red"

    }
}
